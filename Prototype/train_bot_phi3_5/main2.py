from transformers import AutoTokenizer, AutoModelForCausalLM
import torch

def load_qwen_model(model_name="Qwen/Qwen2.5-0.5B"):
    tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
    model = AutoModelForCausalLM.from_pretrained(
        model_name,
        torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
        device_map="auto",
        trust_remote_code=True
    )
    return tokenizer, model

def generate_response(tokenizer, model, messages, max_new_tokens=100):
    inputs = tokenizer.apply_chat_template(
        messages,
        add_generation_prompt=True,
        tokenize=True,
        return_dict=True,
        return_tensors="pt"
    ).to(model.device)

    outputs = model.generate(**inputs, max_new_tokens=max_new_tokens, pad_token_id=tokenizer.eos_token_id)
    response = tokenizer.decode(outputs[0][inputs["input_ids"].shape[-1]:], skip_special_tokens=True)
    return response

if __name__ == "__main__":
    print("üöÄ ƒêang t·∫£i model... (l·∫ßn ƒë·∫ßu c√≥ th·ªÉ l√¢u)")
    tokenizer, model = load_qwen_model("Qwen/Qwen2.5-0.5B")
    print("‚úÖ S·∫µn s√†ng! Nh·∫≠p 'exit' ho·∫∑c 'quit' ƒë·ªÉ tho√°t.\n")

    # L∆∞u l·ªãch s·ª≠ chat (n·∫øu model h·ªó tr·ª£)
    chat_history = []

    while True:
        user_input = input("üë§ B·∫°n: ").strip()
        if user_input.lower() in {"exit", "quit", "bye"}:
            print("üëã T·∫°m bi·ªát!")
            break

        if not user_input:
            continue

        # Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
        chat_history.append({"role": "user", "content": user_input})

        try:
            response = generate_response(tokenizer, model, chat_history, max_new_tokens=200)
            print(f"ü§ñ Bot: {response}")

            # Th√™m ph·∫£n h·ªìi c·ªßa bot v√†o l·ªãch s·ª≠ (ƒë·ªÉ duy t
            # r√¨ ng·ªØ c·∫£nh)
            chat_history.append({"role": "assistant", "content": response})
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            # Tu·ª≥ ch·ªçn: reset l·ªãch s·ª≠ n·∫øu l·ªói do qu√° d√†i