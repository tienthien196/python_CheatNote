#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
decode_full_ajaxData.py
H·ªó tr·ª£:
- ƒê·ªçc t·ª´ stdin (d√°n tay) HO·∫∂C t·ª´ file
- X·ª≠ l√Ω ajaxData = { ... };
- Tr√≠ch xu·∫•t ƒë√°p √°n theo th·ª© t·ª± RESPONSE0, RESPONSE1, ...
"""

import re
import json
import html
import pathlib
import sys
import xml.etree.ElementTree as ET

# --- C·∫•u h√¨nh ---
READ_FROM_FILE = True
JSON_FILE = r"E:\1_test_Src\src\python\python_cheat\on_tap\v2.json"

def decode_unicode_escape(text: str) -> str:
    """Gi·∫£i m√£ \\u003c -> <, x·ª≠ l√Ω c·∫£ \\u2019 -> ' """
    try:
        return text.encode('utf-8').decode('unicode_escape').replace('\r\n', '\n')
    except:
        return text.replace('\r\n', '\n')

def extract_answers_from_xml(xml_content: str):
    """
    Tr√≠ch xu·∫•t ƒë√°p √°n t·ª´ XML QTI, gi·ªØ nguy√™n th·ª© t·ª± theo responseDeclaration
    Tr·∫£ v·ªÅ list: ["ƒë√°p √°n 0", "ƒë√°p √°n 1", ...]
    M·ªói ƒë√°p √°n c√≥ th·ªÉ l√† "A / B / C" n·∫øu c√≥ nhi·ªÅu gi√° tr·ªã
    """
    try:
        # G·ª° b·ªè khai b√°o XML n·∫øu c·∫ßn (ElementTree kh√¥ng th√≠ch c√≥ nhi·ªÅu root)
        if xml_content.lstrip().startswith('<?xml'):
            # T√¨m th·∫ª root ƒë·∫ßu ti√™n
            start = xml_content.find('<assessmentItem')
            if start == -1:
                start = xml_content.find('<')
            xml_content = xml_content[start:]

        root = ET.fromstring(xml_content)
        answers = []

        # Namespace (n·∫øu c√≥)
        ns = {'qti': 'http://www.imsglobal.org/xsd/imsqti_v2p2'}

        # T√¨m t·∫•t c·∫£ responseDeclaration theo th·ª© t·ª±
        for resp_decl in root.findall('.//qti:responseDeclaration', ns):
            identifier = resp_decl.get('identifier', '')
            correct_resp = resp_decl.find('.//qti:correctResponse', ns)
            if correct_resp is None:
                answers.append("(no answer)")
                continue

            values = []
            for val in correct_resp.findall('.//qti:value', ns):
                text = val.text or ''
                clean_text = html.unescape(text.strip())
                values.append(clean_text)

            if values:
                answers.append(" / ".join(values))
            else:
                answers.append("(empty)")

        return answers

    except ET.ParseError as e:
        print(f"‚ö†Ô∏è L·ªói parse XML: {e}")
        # Fallback: d√πng regex (√≠t tin c·∫≠y)
        answers = []
        cr_blocks = re.findall(r'<responseDeclaration[^>]*>.*?<correctResponse>(.*?)</correctResponse>', xml_content, re.S)
        for block in cr_blocks:
            values = re.findall(r'<value>(.*?)</value>', block, re.S)
            clean_vals = [html.unescape(v.strip()) for v in values]
            answers.append(" / ".join(clean_vals) if clean_vals else "(empty)")
        return answers

def main():
    if READ_FROM_FILE:
        print(f"üìÇ ƒê·ªçc t·ª´ file: {JSON_FILE}")
        with open(JSON_FILE, 'r', encoding='utf-8') as f:
            raw = f.read().strip()
    else:
        print("üìå D√°n ƒëo·∫°n ajaxData = { ... }; v√†o, k·∫øt th√∫c b·∫±ng Ctrl+D (Linux/Mac) ho·∫∑c Ctrl+Z (Win):")
        raw = sys.stdin.read().strip()

    # Lo·∫°i b·ªè ajaxData = ... ; n·∫øu c√≥
    if raw.startswith('ajaxData'):
        raw = re.sub(r'^\s*ajaxData\s*=\s*', '', raw)
        raw = re.sub(r';\s*$', '', raw)

    data = json.loads(raw)

    for key, xml_raw in data.items():
        if not key.endswith('.xml'):
            continue

        xml_clean = decode_unicode_escape(xml_raw)
        out_file = pathlib.Path(key)
        out_file.write_text(xml_clean, encoding='utf-8')
        print(f"\n‚úÖ ƒê√£ l∆∞u XML ‚Üí {out_file}")

        answers = extract_answers_from_xml(xml_clean)
        print(f"üìã ƒê√°p √°n ({len(answers)} c√¢u) trong {key}:")
        for idx, ans in enumerate(answers):
            print(f"  {idx:>2}. {ans}")

if __name__ == '__main__':
    main()